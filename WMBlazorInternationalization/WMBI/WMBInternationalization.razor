<CascadingValue Name="CascadeWMBI" Value=this>
    @if (! hasError)
    {
        @if (isLoaded)
        {
            <div class="wmbi-loaded">@ChildContent</div>
        }
        else
        {
            <div class="wmbi-loading">@ChildLoading</div>
        }
    }
    else
    {
        <div class="wmbi-error">@ChildError</div>
    }
</CascadingValue>

@using Microsoft.JSInterop

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public RenderFragment ChildLoading { get; set; }

    [Parameter]
    public RenderFragment ChildError { get; set; }

    [Parameter] 
    public string defaultLanguage { get; set; } = "en";

    [Parameter] 
    public string defaultFileName { get; set; } = "Locale";

    [Parameter] 
    public string defaultFilePath { get; set; } = "i18ntext/";

    [Parameter] 
    public string storageType { get; set; } = "localStorage";

    [Inject]
    protected IJSRuntime jsRuntime { get; set; }

    [Inject]
    NavigationManager MyNavigationManager { get; set; }
    
    protected IWMBI TheWMBI;
    protected bool isLoaded = false;
    protected bool hasError = false;

    protected override void OnInitialized()
    {
        TheWMBI = new WMBIStrategy(jsRuntime);
        TheWMBI.Configure(defaultLanguage, defaultFileName, defaultFilePath, storageType);
        TheWMBI.Start(MyNavigationManager.BaseUri);
        TheWMBI.SetCallback(() => {
            isLoaded = TheWMBI.IsLoaded();
            hasError = TheWMBI.HasError();
            StateHasChanged();
        });
    }

    public string GetTranslation(string key)
    {
        return TheWMBI.GetTranslation(key);
    }

    public void SetLanguage(string key)
    {
        TheWMBI.SetLanguage(key);
    }

    public string GetCurrentLang()
    {
        return TheWMBI.GetCurrentLang();
    }
}
